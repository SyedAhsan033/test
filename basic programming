package variablesAssignment;

public class basic {
	
	// literals, assignment and variables.
	//literals is a notation that represents a fixed value which can be directly assign to the variable with the help of assignment statement.
	
	
	public void add(int a,int b) {
		int c;
		c=a+b;
	System.out.println(c);
	}
	
	//passing variables through method
	//mainly we use passing variables through call by value method which directly calls the object.

	
	//class for call by value
		public static void Example(int x, int y)
	    {
	        x++;
	        y++;
	    }
	
	public void callByValue(String args[]) {
		int a = 10;
        int b = 20;
       
        basics object = new basics();
 
        System.out.println("Value of a: " + a
                           + " & b: " + b);
 
        object.Example (a, b);
        System.out.println("Value of a: "
                           + a + " & b: " + b);
	}
	
	
	//Arrays
	//An Array is a group of link typed variables that are referred to by common name.
	
	public static void main(String args[]){  
		int a[]=new int[5]; 
		a[0]=10; 
		a[1]=20;  
		a[2]=70;  
		a[3]=40;  
		a[4]=50;  
		for(int i=0;i<a.length;i++) 
		System.out.println(a[i]);  
		}  
	
	
	
	//wrapper class
	//wrapper class provides the mechanism to convert primitive data type into object and object into primitive data type.
	//example: boolean, char, int.
	
	
	
	
	
	//Operators
	//Assignment Operator
	public static void Assignment(String[] args)
    {
        int num1 = 10, num2 = 20;
  
        System.out.println("num1 = " + num1);
        System.out.println("num2 = " + num2);
  
        num1 += num2;
  
        System.out.println("num1 = " + num1);
    }
	
	
	//Relational Operator
	public static void Relational(String[] args) {

	    int a = 7, b = 11;

	    System.out.println("a is " + a + " and b is " + b);

	    System.out.println(a == b);  // false

	    System.out.println(a != b);  // true

	    System.out.println(a > b);  // false

	    System.out.println(a < b);  // true

	    System.out.println(a >= b);  // false

	    System.out.println(a <= b);  // true
	  }
	
	
	
	//Logical Operator
	public static void Logical(String[] args) {

	    System.out.println((5 > 3) && (8 > 5));  // true
	    System.out.println((5 > 3) && (8 < 5));  // false

	    System.out.println((5 < 3) || (8 > 5));  // true
	    System.out.println((5 > 3) || (8 < 5));  // true
	    System.out.println((5 < 3) || (8 < 5));  // false

	    System.out.println(!(5 == 3));  // true
	    System.out.println(!(5 > 3));  // false
	  }
	
	
	
	//InctanceOf Operator
	 public static void Inctance(String[] args) {

		    String str = "Programiz";
		    boolean result;

		    // checks if str is an instance of
		    // the String class
		    result = str instanceof String;
		    System.out.println("Is str an object of String? " + result);
		  }
	 
	 
	 
	 
	 //Control flow statements and loops
	 //switch statement
	 public static void Switch(String[] args) {

		    int number = 44;
		    String size;

		    switch (number) {

		      case 29:
		        size = "Small";
		        break;

		      case 42:
		        size = "Medium";
		        break;

		      // match the value of week
		      case 44:
		        size = "Large";
		        break;

		      case 48:
		        size = "Extra Large";
		        break;
		      
		      default:
		        size = "Unknown";
		        break;

		    }
		    System.out.println("Size: " + size);
		  }
	 
	 
	 
	 //if-else statements
	 public static void statement(String[] args) {  
		    int number=13;  
		    if(number%2==0){  
		        System.out.println("even number");  
		    }else{  
		        System.out.println("odd number");  
		    }  
		}  
	 
	 
	 
	 //loops 
	 public static void loops(String args[])
	    {
	        for (int i = 1; i <= 5; i++)
	            System.out.println("Hello World");
	    }
	 
	 
	 
	 //Working with Strings, Arrays
	 //Strings
	 public static void strings(String args[]){    
		 String s1="java";
		 char ch[]={'s','t','r','i','n','g','s'};    
		 String s2=new String(ch);
		 String s3=new String("example");  
		 System.out.println(s1);    
		 System.out.println(s2);    
		 System.out.println(s3);    
		 }    
	 
	
	 
	 //All primitive Wrapper class are immutable in java, so operations like addition and subtraction create a new object and not modify the old.
	
	 
	 //String Builder
	 public static void StringBuilder(String args[]){  
		 StringBuilder sb=new StringBuilder("Hello");  
		 sb.replace(1,3,"Java");  
		 System.out.println(sb);//prints HJavalo  
		 } 
	 
	 
	 //String Buffer
	 public static void StringBuffer(String args[]){  
		 StringBuffer sb=new StringBuffer("Hello ");  
		 sb.append("Java");
		 System.out.println(sb);//prints Hello Java  
		 }
	 
	 
	 
	 //OOPS
	 //Encapsulation
	 private String name;  
	//getter method for name  
	public String getName(){  
	return name;  
	}  
	//setter method for name  
	public void setName(String name){  
	this.name=name;  
	} 
	
	
	
	//Polymorphism
	void run(){System.out.println("running");}

	public void display() {
		// TODO Auto-generated method stub
		
	}  
	}  
	class Splendor extends basic{  
	  void run(){System.out.println("running safely with 60km");}  
	  
	  public static void main(String args[]){  
	    basic b = new Splendor();//upcasting  
	    b.run();  
	  } 
	  
	  
	  //Inheritance
	  // field and method of the parent class
	  String name;
	  public void eat() {
	    System.out.println("I can eat");
	  }
	  // inherit from basic
	  class My extends basic {

	    // new method in subclass
	    public void display() {
	      System.out.println("My name is " + name);
	    }
	  }
	
	  
	  
	  //method Overloading
	  class Adder{  
	  static int add(int a, int b){return a+b;}  
	  static double add(double a, double b){return a+b;}  
	  }  
	  class TestOverloading2{  
	  public static void main(String[] args){  
	  System.out.println(Adder.add(11,11));  
	  System.out.println(Adder.add(12.3,12.6));  
	  } 
	  }
	  
	  
	  //method overriding
	  //If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.
	  
	  
	  
	  //Implementing an Interface
	  //interface <interface_name>{  
	      
		    // declare constant fields  
		    // declare methods that abstract   
		    // by default.  
		//}  
	
		  
		  
		  //Returning the value
	  public void display() {
	  }
	        
	    public static void returning(String[] args) {  
	    basic e =new basic();  
	    e.display();  
	  
	    }
	    
	    
	    //Constructor
	   //creating a default constructor  
	    void basic(){System.out.println("Bike is created");}  
	    public static void constr(String args[]){  

	    basic b=new basic();  
	    
	    }  
	    
	    
	    //Overloaded Constructor
	    public class Student extends basic {  
	    	//instance variables of the class  
	    	int id;  
	    	String name;  
	    	  
	    	Student(){  
	    	System.out.println("this a default constructor");  
	    	}  
	    	  
	    	Student(int i, String n){  
	    	id = i;  
	    	name = n;  
	    	}  
	    	  
	    	public static void main(String[] args) {  
	    	//object creation  
	    	Student s = new Student();  
	    	System.out.println("\nDefault Constructor values: \n");  
	    	System.out.println("Student Id : "+s.id + "\nStudent Name : "+s.name);  
	    	  
	    	System.out.println("\nParameterized Constructor values: \n");  
	    	Student student = new Student(10, "David");  
	    	System.out.println("Student Id : "+student.id + "\nStudent Name : "+student.name);  
	    	}  
	    	}  
	}
